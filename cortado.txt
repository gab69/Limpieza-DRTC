import pandas as pd
from datetime import datetime
from openpyxl import load_workbook
from openpyxl.styles import Border, Side
from openpyxl.utils.dataframe import dataframe_to_rows

# INGRESA EL TAREO DE CADA DÍA
df = pd.read_excel('01-08-2023.xls')

bd = df[['Unnamed: 0', 'Unnamed: 1']]
b = bd.drop(0)
b = b.dropna()

# Salida tarde
b['Unnamed: 0'] = pd.to_datetime(b['Unnamed: 0'])
hora_objetivo = datetime.strptime('17:00:00', '%H:%M:%S')
resultados_Starde = b[b['Unnamed: 0'].dt.time > hora_objetivo.time()]
resultados_sin_duplicados_salida_tarde = resultados_Starde.drop_duplicates(subset=['Unnamed: 1'])

# Entrada Tarde
b['Unnamed: 0'] = pd.to_datetime(b['Unnamed: 0'])
hora_inicial = datetime.strptime('13:30:00', '%H:%M:%S')
hora_final = datetime.strptime('16:00:00', '%H:%M:%S')
resultados_Etarde = b[(b['Unnamed: 0'].dt.time >= hora_inicial.time()) & (b['Unnamed: 0'].dt.time <= hora_final.time())]
resultados_sin_duplicados_entrada_tarde = resultados_Etarde.drop_duplicates(subset=['Unnamed: 1'])

# Salida de Mañana
b['Unnamed: 0'] = pd.to_datetime(b['Unnamed: 0'])
hora_inicial = datetime.strptime('12:30:00', '%H:%M:%S')
hora_final = datetime.strptime('13:30:00', '%H:%M:%S')
resultados_Smañana = b[(b['Unnamed: 0'].dt.time >= hora_inicial.time()) & (b['Unnamed: 0'].dt.time <= hora_final.time())]
resultados_sin_duplicados_salida_mañana = resultados_Smañana.drop_duplicates(subset=['Unnamed: 1'])

# Entrada Mañana
b['Unnamed: 0'] = pd.to_datetime(b['Unnamed: 0'])
hora_inicial = datetime.strptime('9:00:00', '%H:%M:%S')
resultados_Emañana = b[(b['Unnamed: 0'].dt.time <= hora_inicial.time())]
resultados_sin_duplicados_entrada_mañana = resultados_Emañana.drop_duplicates(subset=['Unnamed: 1'])

# Elimina los datos de la persona que llegó más tarde de las 8:11
resultados_sin_duplicados_entrada_mañana_copy = resultados_sin_duplicados_entrada_mañana.copy()
resultados_sin_duplicados_entrada_mañana_copy['Unnamed: 0'] = pd.to_datetime(resultados_sin_duplicados_entrada_mañana_copy['Unnamed: 0'], format='%Y-%m-%d %H:%M:%S', errors='coerce')
hora_limite = pd.to_datetime('08:11:00', format='%H:%M:%S').time()
resultados_sin_duplicados_entrada_mañana.loc[(resultados_sin_duplicados_entrada_mañana_copy['Unnamed: 0'].notnull()) & (resultados_sin_duplicados_entrada_mañana_copy['Unnamed: 0'].dt.time >= hora_limite), 'Unnamed: 0'] = ''

# Elimina los datos de la persona que llegó más tarde de las 14:31
resultados_sin_duplicados_entrada_tarde_copy = resultados_sin_duplicados_entrada_tarde.copy()
resultados_sin_duplicados_entrada_tarde_copy['Unnamed: 0'] = pd.to_datetime(resultados_sin_duplicados_entrada_tarde_copy['Unnamed: 0'], format='%Y-%m-%d %H:M:S', errors='coerce')
hora_limite_tarde = pd.to_datetime('14:31:00', format='%H:%M:%S').time()
resultados_sin_duplicados_entrada_tarde.loc[(resultados_sin_duplicados_entrada_tarde_copy['Unnamed: 0'].notnull()) & (resultados_sin_duplicados_entrada_tarde_copy['Unnamed: 0'].dt.time >= hora_limite_tarde), 'Unnamed: 0'] = ''

# Crea una nueva tabla
column_mapping_entrada_mañana = {
    'Unnamed: 1': 'DNI',
    'Unnamed: 0': 'Entrada Mañana'
}

column_mapping_salida_mañana = {
    'Unnamed: 1': 'DNI',
    'Unnamed: 0': 'Salida Mañana'
}

column_mapping_entrada_tarde = {
    'Unnamed: 1': 'DNI',
    'Unnamed: 0': 'Entrada Tarde'
}

column_mapping_salida_tarde = {
    'Unnamed: 1': 'DNI',
    'Unnamed: 0': 'Salida Tarde'
}

resultados_sin_duplicados_entrada_mañana = resultados_sin_duplicados_entrada_mañana.rename(columns=column_mapping_entrada_mañana)
resultados_sin_duplicados_salida_mañana = resultados_sin_duplicados_salida_mañana.rename(columns=column_mapping_salida_mañana)
resultados_sin_duplicados_entrada_tarde = resultados_sin_duplicados_entrada_tarde.rename(columns=column_mapping_entrada_tarde)
resultados_sin_duplicados_salida_tarde = resultados_sin_duplicados_salida_tarde.rename(columns=column_mapping_salida_tarde)

# Ingresa el dataset de los trabajadores
tb = pd.read_excel('trabajadores DRTC.xlsx')

# Fusiona los DataFrames en base a la columna 'DNI'
nueva_tabla = resultados_sin_duplicados_entrada_mañana.merge(resultados_sin_duplicados_salida_mañana, on='DNI', how='left')
nueva_tabla = nueva_tabla.merge(resultados_sin_duplicados_entrada_tarde, on='DNI', how='left')
nueva_tabla = nueva_tabla.merge(resultados_sin_duplicados_salida_tarde, on='DNI', how='left')

# Convierte las columnas 'DNI' en ambos DataFrames al mismo tipo de dato (int)
tb['DNI'] = tb['DNI'].astype(int)
nueva_tabla['DNI'] = nueva_tabla['DNI'].astype(int)

# Realiza la unión en base a 'DNI'
resultado = pd.merge(tb, nueva_tabla, on='DNI', how='left')

# Elimina las columnas 'DNI_y' y renombra 'DNI_x' a 'DNI'
resultado = resultado.rename(columns={'DNI_x': 'DNI'})

# Crea una columna 'Fecha' con la fecha solamente
resultado['Fecha'] = resultado['Entrada Mañana'].dt.strftime('%Y-%m-%d')

# Separa el formato a simplemente la hora
columnas_horas = ['Entrada Mañana', 'Salida Mañana', 'Entrada Tarde', 'Salida Tarde']

for columna in columnas_horas:
    resultado[columna] = pd.to_datetime(resultado[columna])

# Extrae la hora en formato HH:MM:SS
for columna in columnas_horas:
    resultado[columna] = resultado[columna].dt.strftime('%H:%M:%S')

# Llena las celdas vacías en las columnas específicas con "NAT"
columnas = ['Entrada Mañana', 'Salida Mañana', 'Entrada Tarde', 'Salida Tarde']

for columna in columnas:
    resultado[columna] = resultado[columna].fillna("NAT")
    
###############################################################################################################################
###################################################EXPORTAR A EXCEL
#NOMBRE DEL ARCHIVO A GUARDAR
nombre_archivo = '01-08-2023.xlsx'
# Exporta el DataFrame a Excel
resultado.to_excel(nombre_archivo, sheet_name='Hoja1', index=False, engine='openpyxl')
# Abre el archivo Excel
wb = load_workbook(nombre_archivo)
ws = wb['Hoja1']  # Nombre de la hoja de trabajo
# Define el estilo de borde
border = Border(left=Side(style='thin'), 
                right=Side(style='thin'), 
                top=Side(style='thin'), 
                bottom=Side(style='thin'))
# Itera sobre las celdas y aplica el estilo de borde
for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=1, max_col=ws.max_column):
    for cell in row:
        cell.border = border
# Ajusta automáticamente el ancho de las columnas a su contenido
for column_cells in ws.columns:
    max_length = 0
    for cell in column_cells:
        cell_length = len(str(cell.value))
        if cell_length > max_length:
            max_length = cell_length
    adjusted_width = max_length + 2
    ws.column_dimensions[column_cells[0].column_letter].width = adjusted_width
# Guarda el archivo Excel
wb.save(nombre_archivo)
print(f"Se ha exportado '{nombre_archivo}' de forma exitosa con bordes en todas las celdas y ajuste automático de ancho de columna.")